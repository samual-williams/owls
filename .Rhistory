# Compare treatment and null model
AICtab(mTreatmentNull, mTreatment)
# Fit Bernoulli glm
mTreatment <- glm(like.nesting.in.roof ~ stage, family = binomial (link = "cloglog"), data = questionTreatmentData) # used cloglog link over default logit as allows for more asymmetry in response
# Fit null model
mTreatmentNull <- glm(like.nesting.in.roof ~ 1, family = binomial (link = "cloglog"), data = questionTreatmentData) # used cloglog link over default logit as allows for more asymmetry in response
# Compare treatment and null model
AICtab(mTreatmentNull, mTreatment)
# Fit Bernoulli glm
mTreatment <- glm(home ~ stage, family = binomial (link = "cloglog"), data = questionTreatmentData) # used cloglog link over default logit as allows for more asymmetry in response
t
AICtab(mTreatmentNull, mTreatment)
# Fit Bernoulli glm
mTreatment <- glm(like.nesting.in.roof ~ stage, family = binomial (link = "cloglog"), data = questionTreatmentData) # used cloglog link over default logit as allows for more asymmetry in response
# Fit null model
mTreatmentNull <- glm(like.nesting.in.roof ~ 1, family = binomial (link = "cloglog"), data = questionTreatmentData) # used cloglog link over default logit as allows for more asymmetry in response
# Compare treatment and null model
AICtab(mTreatmentNull, mTreatment)
# Now fit same models for control group
questionControl <- filter(questionData, hear.talk != "yes") # remove respondents that did  hear talk
ggplot(questionControl, aes(fill=hear.talk, x = stage)) + geom_bar() # all post respondents did not hear talk
# Check plot of resonse variable
ggplot(questionControl, aes(fill=like.nesting.in.roof, x = stage)) + geom_bar()
# Fit model with controls
mQuestionControl <- glm(like.nesting.in.roof ~ stage, family = binomial (link = "cloglog"), data = questionControl)
summary(mQuestionControl)
devresid <- resid(mQuestionControl, type = "deviance") # for model validation
hist(devresid) # No deviance residuals >2, so no evidence of pooor model fit
# Fit null model
mQuestionControlNull <- glm(like.nesting.in.roof ~ 1, family = binomial (link = "cloglog"), data = questionControl) # used cloglog link over default logit as allows for more asymmetry in response
summary(mQuestionControlNull)
summary(mQuestionControl)
summary(mQuestionControlNull)
devresid <- resid(mQuestionControlNull, type = "deviance") # for model validation
hist(devresid) # No deviance residuals >2, so no evidence of pooor model fit
# Compare control vs null models
AICtab(mQuestionControlNull, mQuestionControl)
###################################################################
# Would you put up an artificial nest for owls to nest in, in your yard (compound) near your home? (yes/no)
###################################################################
ggplot(data, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # plot shows missing values
###################################################################
# Would you put up an artificial nest for owls to nest in, in your yard (compound) near your home? (yes/no)
###################################################################
ggplot(data, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # plot shows missing values
# fliter out the blanks in resonse variable
questionData <- filter(data, would.put.nest.box.in.yard != "") # removes missing values in response variable
ggplot(questionData, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # missing responses gone
# Now remove respondents that did not hear the talk
questionTreatmentData <- filter(questionData, hear.talk != "no") # remove respondents that did not hear talk
ggplot(questionTreatmentData, aes(fill=hear.talk, x = stage)) + geom_bar() # All post resondents heard talk
# Check plot of resonse variable
ggplot(questionTreatmentData, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # Could be a relationship
###################################################################
# Would you put up an artificial nest for owls to nest in, in your yard (compound) near your home? (yes/no)
###################################################################
ggplot(data, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # plot shows missing values
###################################################################
# Would you put up an artificial nest for owls to nest in, in your yard (compound) near your home? (yes/no)
###################################################################
ggplot(data, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # plot shows missing values
# fliter out the blanks & errors in resonse variable
boxData <- filter(data, would.put.nest.box.in.yard != "")
boxData <- filter(boxData, would.put.nest.box.in.yard != "the owls. No owls")
boxData <- filter(boxData, would.put.nest.box.in.yard != "witchcraft")
ggplot(boxData, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # missing values gone.
# fliter out the blanks in resonse variable
questionData <- filter(boxData, would.put.nest.box.in.yard != "") # removes missing values in response variable
###################################################################
# Would you put up an artificial nest for owls to nest in, in your yard (compound) near your home? (yes/no)
###################################################################
ggplot(data, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # plot shows missing values
ggplot(boxData, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # missing values gone.
# fliter out the blanks in resonse variable
questionData <- filter(boxData, would.put.nest.box.in.yard != "") # removes missing values in response variable
ggplot(questionData, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # missing responses gone
# Now remove respondents that did not hear the talk
questionTreatmentData <- filter(questionData, hear.talk != "no") # remove respondents that did not hear talk
ggplot(questionTreatmentData, aes(fill=hear.talk, x = stage)) + geom_bar() # All post resondents heard talk
# Check plot of resonse variable
ggplot(questionTreatmentData, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # Could be a relationship
# Fit Bernoulli glm
mTreatment <- glm(would.put.nest.box.in.yard ~ stage, family = binomial (link = "cloglog"), data = questionTreatmentData) # used cloglog link over default logit as allows for more asymmetry in response
summary(mTreatment)
# Model validation
devresid <- resid(mTreatment, type = "deviance")
hist(devresid) # Some deviance residuals >2, so could be evidence of pooor model fit
# Fit null model
mTreatmentNull <- glm(would.put.nest.box.in.yard ~ 1, family = binomial (link = "cloglog"), data = questionTreatmentData) # used cloglog link over default logit as allows for more asymmetry in response
summary(mHomeNull)
# Model validation
devresid <- resid(mHomeNull, type = "deviance")
hist(devresid) # No deviance residuals >2, so no evidence of pooor model fit
# Compare treatment and null model
AICtab(mTreatmentNull, mTreatment)
# Now fit same models for control group
questionControl <- filter(questionData, hear.talk != "yes") # remove respondents that did  hear talk
ggplot(questionControl, aes(fill=hear.talk, x = stage)) + geom_bar() # all post respondents did not hear talk
# Check plot of resonse variable
ggplot(questionControl, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar()
###################################################################
# Would you put up an artificial nest for owls to nest in, in your yard (compound) near your home? (yes/no)
###################################################################
ggplot(data, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # plot shows missing values
# fliter out the blanks & errors in resonse variable
boxData <- filter(data, would.put.nest.box.in.yard != "")
boxData <- filter(boxData, would.put.nest.box.in.yard != "the owls. No owls")
boxData <- filter(boxData, would.put.nest.box.in.yard != "witchcraft")
ggplot(boxData, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # missing values gone.
questionData <- boxData
# Now remove respondents that did not hear the talk
questionTreatmentData <- filter(questionData, hear.talk != "no") # remove respondents that did not hear talk
ggplot(questionTreatmentData, aes(fill=hear.talk, x = stage)) + geom_bar() # All post resondents heard talk
# Check plot of resonse variable
ggplot(questionTreatmentData, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar() # Could be a relationship
# Fit Bernoulli glm
mTreatment <- glm(would.put.nest.box.in.yard ~ stage, family = binomial (link = "cloglog"), data = questionTreatmentData) # used cloglog link over default logit as allows for more asymmetry in response
summary(mTreatment)
# Model validation
devresid <- resid(mTreatment, type = "deviance")
hist(devresid) # No deviance residuals >2, so no evidence of pooor model fit
# Fit null model
mTreatmentNull <- glm(would.put.nest.box.in.yard ~ 1, family = binomial (link = "cloglog"), data = questionTreatmentData) # used cloglog link over default logit as allows for more asymmetry in response
summary(mHomeNull)
# Model validation
devresid <- resid(mHomeNull, type = "deviance")
hist(devresid) # No deviance residuals >2, so no evidence of pooor model fit
# Compare treatment and null model
AICtab(mTreatmentNull, mTreatment)
# Now fit same models for control group
questionControl <- filter(questionData, hear.talk != "yes") # remove respondents that did  hear talk
ggplot(questionControl, aes(fill=hear.talk, x = stage)) + geom_bar() # all post respondents did not hear talk
# Check plot of resonse variable
ggplot(questionControl, aes(fill=would.put.nest.box.in.yard, x = stage)) + geom_bar()
# Fit model with controls
mQuestionControl <- glm(would.put.nest.box.in.yard ~ stage, family = binomial (link = "cloglog"), data = questionControl)
summary(mQuestionControl)
devresid <- resid(mQuestionControl, type = "deviance") # for model validation
hist(devresid) # Some deviance residuals >2, so some evidence of pooor model fit
# Fit null model
mQuestionControlNull <- glm(would.put.nest.box.in.yard ~ 1, family = binomial (link = "cloglog"), data = questionControl) # used cloglog link over default logit as allows for more asymmetry in response
summary(mQuestionControlNull)
summary(mQuestionControl)
devresid <- resid(mQuestionControlNull, type = "deviance") # for model validation
hist(devresid) # Some deviance residuals >2, so some evidence of pooor model fit
# Compare control vs null models
AICtab(mQuestionControlNull, mQuestionControl)
###################################################################
# Which of the three choices best describes your feeling towards owls?
# Like/No feeling/Not like
###################################################################
ggplot(data, aes(fill=attitude.to.owls, x = stage)) + geom_bar() # plot shows missing values
###################################################################
# Which of the three choices best describes your feeling towards owls?
# Like/No feeling/Not like
###################################################################
ggplot(data, aes(fill=attitude.to.owls, x = stage)) + geom_bar() # plot shows missing values
# fliter out the blanks in resonse variable & delete rows that did not hear talk
attitudeData <- filter(data, attitude.to.owls != "") # removes missing values in response variable
ggplot(attitudeData, aes(fill=attitude.to.owls, x = stage)) + geom_bar() # missing values gone
# First test those that did hear the talk
ggplot(attitudeData, aes(fill=hear.talk, x = stage)) + geom_bar()
# fliter out the blanks in resonse variable & delete rows that did not hear talk
questionData <- filter(data, attitude.to.owls != "") # removes missing values in response variable
ggplot(questionData, aes(fill=attitude.to.owls, x = stage)) + geom_bar() # missing values gone
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
questionTreatmentData <- filter(questionData, hear.talk != "no") # remove respondents that did not hear talk
ggplot(questionTreatmentData, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionTreatmentData, aes(fill=attitude.to.owls, x = stage)) + geom_bar() # Lookks like a relationship
# Test responses to same question using controls
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
###################################################################
# Which of the three choices best describes your feeling towards owls?
# Like/No feeling/Not like
###################################################################
ggplot(data, aes(fill=attitude.to.owls, x = stage)) + geom_bar() # plot shows missing values
# fliter out the blanks in resonse variable & delete rows that did not hear talk
questionData <- filter(data, attitude.to.owls != "") # removes missing values in response variable
ggplot(questionData, aes(fill=attitude.to.owls, x = stage)) + geom_bar() # missing values gone
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
questionTreatmentData <- filter(questionData, hear.talk != "no") # remove respondents that did not hear talk
ggplot(questionTreatmentData, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionTreatmentData, aes(fill=attitude.to.owls, x = stage)) + geom_bar() # Lookks like a relationship
# Ordinal ordered logistic regression using MASS - see https://stats.idre.ucla.edu/r/dae/ordinal-logistic-regression/
library(MASS)
mTreatment <- polr(attitude.to.owls ~ stage, data = questionTreatmentData, Hess=TRUE)
summary(mTreatment)
m <- mTreatment
dat <- questionTreatmentData
# Calculate p values
## store table
(ctable <- coef(summary(m)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
# 95% CIs
(ci <- confint(m)) # default method gives profiled CIs - shouldn't cross 0
confint.default(m) # CIs assuming normality
# The coefficients from the model can be somewhat difficult to interpret because they are scaled in terms of logs. Another way to interpret logistic regression models is to convert the coefficients into odds ratios. To get the OR and confidence intervals, we just exponentiate the estimates and confidence intervals.
exp(coef(m)) # stage2 post 1.881341.
exp(cbind(OR = coef(m), ci))
# create the function that estimates the values that will be graphed to validate model
library(Hmisc)
sf <- function(y) {
c('Y>=1' = qlogis(mean(y >= 1)),
'Y>=2' = qlogis(mean(y >= 2)),
'Y>=3' = qlogis(mean(y >= 3)))
}
(s <- with(dat, summary(as.numeric(attitude.to.owls) ~ stage, fun=sf))) ###### Can't validate model due to INF values in table #######
glm(I(as.numeric(attitude.to.owls) >= 2) ~ stage, family="binomial", data = dat)
glm(I(as.numeric(attitude.to.owls) >= 3) ~ stage, family="binomial", data = dat)
# Fit null model
mTreatmentNull <- polr(attitude.to.owls ~ 1, data = questionTreatmentData, Hess=TRUE)
summary(mTreatmentNull)
# compare full and null model
AICtab(mTreatmentNull, mTreatment)
# Test responses to same question using controls
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
questionControl <- filter(questionData, hear.talk != "yes") # remove respondents that did not hear talk
ggplot(questionControl, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionControl, aes(fill=attitude.to.owls, x = stage)) + geom_bar() # Lookks like a relationship
# compare full and null model
AICtab(mTreatmentNull, mTreatment)
# Test responses to same question using controls
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
questionControlData <- filter(questionData, hear.talk != "yes") # remove respondents that did not hear talk
ggplot(questionControlData, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionControlData, aes(fill=attitude.to.owls, x = stage)) + geom_bar()
# Ordered logistic regression
mControl <- polr(attitude.to.owls ~ stage, data = questionControlData, Hess=TRUE)
summary(mControl)
m <- mControl
dat <- questionControlData
# Calculate p values
## store table
(ctable <- coef(summary(m)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
# 95% CIs
(ci <- confint(m)) # default method gives profiled CIs - shouldn't cross 0
confint.default(m) # CIs assuming normality
(s <- with(dat, summary(as.numeric(attitude.to.owls) ~ stage, fun=sf))) ###### Can't validate model due to INF values in table #######
glm(I(as.numeric(attitude.to.owls) >= 2) ~ stage, family="binomial", data = dat)
glm(I(as.numeric(attitude.to.owls) >= 3) ~ stage, family="binomial", data = dat)
# Fit null control model
mControlNull <- polr(what.do.if.owl.lands.on.the.roof ~ 1, data = dataTemp, Hess=TRUE)
summary(mNull)
# compare full and null model
AICtab(mControlNull, mControl)
# Fit null control model
mControlNull <- polr(attitude.to.owls ~ 1, data = dataTemp, Hess=TRUE)
summary(mNull)
# compare full and null model
AICtab(mControlNull, mControl)
# compare full and null model
AICtab(mTreatmentNull, mTreatment)
questionControlData <- filter(questionData, hear.talk != "yes") # remove respondents that did not hear talk
ggplot(questionControlData, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionControlData, aes(fill=attitude.to.owls, x = stage)) + geom_bar()
# Test responses to same question using controls
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
questionControlData <- filter(questionData, hear.talk != "yes") # remove respondents that did not hear talk
ggplot(questionControlData, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionControlData, aes(fill=attitude.to.owls, x = stage)) + geom_bar()
# Ordered logistic regression
mControl <- polr(attitude.to.owls ~ stage, data = questionControlData, Hess=TRUE)
summary(mControl)
m <- mControl
dat <- questionControlData
# Calculate p values
## store table
(ctable <- coef(summary(m)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
# 95% CIs
(ci <- confint(m)) # default method gives profiled CIs - shouldn't cross 0
confint.default(m) # CIs assuming normality
(s <- with(dat, summary(as.numeric(attitude.to.owls) ~ stage, fun=sf))) ###### Can't validate model due to INF values in table #######
glm(I(as.numeric(attitude.to.owls) >= 2) ~ stage, family="binomial", data = dat)
glm(I(as.numeric(attitude.to.owls) >= 3) ~ stage, family="binomial", data = dat)
# Fit null control model
mControlNull <- polr(attitude.to.owls ~ 1, data = questionControlData, Hess=TRUE)
summary(mNull)
# compare full and null model
AICtab(mControlNull, mControl)
ggplot(data, aes(fill=afraid.of.owls, x = stage)) + geom_bar() # plot shows missing values
# fliter out the blanks in resonse variable & delete rows that did not hear talk
questionData <- filter(data, afraid.of.owls != "") # removes missing values in response variable
ggplot(questionData, aes(fill=afraid.of.owls, x = stage)) + geom_bar() # missing values gone
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
questionTreatmentData <- filter(questionData, hear.talk != "no") # remove respondents that did not hear talk
ggplot(questionTreatmentData, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionTreatmentData, aes(fill=afraid.of.owls, x = stage)) + geom_bar() # Looks like a relationship
# Fit ordered logistic regression model
mTreatment <- polr(afraid.of.owls ~ stage, data = questionTreatmentData, Hess=TRUE)
summary(mTreatment)
m <- mTreatment
dat <- questionTreatmentData
# Calculate p values
## store table
(ctable <- coef(summary(m)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
# 95% CIs
(ci <- confint(m)) # default method gives profiled CIs - shouldn't cross 0
confint.default(m) # CIs assuming normality
# The coefficients from the model can be somewhat difficult to interpret because they are scaled in terms of logs. Another way to interpret logistic regression models is to convert the coefficients into odds ratios. To get the OR and confidence intervals, we just exponentiate the estimates and confidence intervals.
exp(coef(m)) # stage2 post 1.881341.
# create the function that estimates the values that will be graphed to validate model
library(Hmisc)
# create the function that estimates the values that will be graphed to validate model
(s <- with(dat, summary(as.numeric(afraid.of.owls) ~ stage, fun=sf))) ###### Can't validate model due to INF values in table #######
glm(I(as.numeric(afraid.of.owls) >= 2) ~ stage, family="binomial", data = dat)
glm(I(as.numeric(afraid.of.owls) >= 3) ~ stage, family="binomial", data = dat)
# Fit null model
mTreatmentNull <- polr(afraid.of.owls ~ 1, data = questionTreatmentData, Hess=TRUE)
summary(mTreatmentNull)
# compare full and null model
AICtab(mTreatmentNull, mTreatment)
# Test responses to same question using controls
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
questionControlData <- filter(questionData, hear.talk != "yes") # remove respondents that did not hear talk
ggplot(questionControlData, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionControlData, aes(fill=afraid.of.owls, x = stage)) + geom_bar()
# Fit control model
mControl <- polr(afraid.of.owls ~ stage, data = questionControlData, Hess=TRUE)
summary(mControl)
m <- mControl
dat <- questionControlData
# Calculate p values
## store table
(ctable <- coef(summary(m)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
# 95% CIs
(ci <- confint(m)) # default method gives profiled CIs - shouldn't cross 0
confint.default(m) # CIs assuming normality
(s <- with(dat, summary(as.numeric(afraid.of.owls) ~ stage, fun=sf))) ###### Can't validate model due to INF values in table #######
glm(I(as.numeric(afraid.of.owls) >= 2) ~ stage, family="binomial", data = dat)
glm(I(as.numeric(afraid.of.owls) >= 3) ~ stage, family="binomial", data = dat)
# Fit null control model
mControlNull <- polr(afraid.of.owls ~ 1, data = questionControlData, Hess=TRUE)
summary(mNull)
# compare full and null model
AICtab(mControlNull, mControl)
ggplot(data, aes(fill=what.do.if.owl.lands.on.the.roof, x = stage)) + geom_bar() # plot shows missing values
# fliter out the blanks in resonse variable & delete rows that did not hear talk
questionData <- filter(data, what.do.if.owl.lands.on.the.roof != "") # removes missing values in response variable
ggplot(questionData, aes(fill=what.do.if.owl.lands.on.the.roof, x = stage)) + geom_bar() # missing values gone
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
questionTreatmentData <- filter(questionData, hear.talk != "no") # remove respondents that did not hear talk
ggplot(questionTreatmentData, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionTreatmentData, aes(fill=what.do.if.owl.lands.on.the.roof, x = stage)) + geom_bar() # Looks like a relationship
# Fit ordered logistic regression model
mTreatment <- polr(what.do.if.owl.lands.on.the.roof ~ stage, data = questionTreatmentData, Hess=TRUE)
summary(mTreatment)
m <- mTreatment
dat <- questionTreatmentData
# Calculate p values
## store table
(ctable <- coef(summary(m)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
# 95% CIs
(ci <- confint(m)) # default method gives profiled CIs - shouldn't cross 0
confint.default(m) # CIs assuming normality
# The coefficients from the model can be somewhat difficult to interpret because they are scaled in terms of logs. Another way to interpret logistic regression models is to convert the coefficients into odds ratios. To get the OR and confidence intervals, we just exponentiate the estimates and confidence intervals.
exp(coef(m)) # stage2 post 1.881341.
# create the function that estimates the values that will be graphed to validate model
(s <- with(dat, summary(as.numeric(what.do.if.owl.lands.on.the.roof) ~ stage, fun=sf))) ###### Can't validate model due to INF values in table #######
glm(I(as.numeric(what.do.if.owl.lands.on.the.roof) >= 2) ~ stage, family="binomial", data = dat)
glm(I(as.numeric(what.do.if.owl.lands.on.the.roof) >= 3) ~ stage, family="binomial", data = dat)
# Fit null model
mTreatmentNull <- polr(what.do.if.owl.lands.on.the.roof ~ 1, data = questionTreatmentData, Hess=TRUE)
summary(mTreatmentNull)
# compare full and null model
AICtab(mTreatmentNull, mTreatment)
# Test responses to same question using controls
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
questionControlData <- filter(questionData, hear.talk != "yes") # remove respondents that did not hear talk
ggplot(questionControlData, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionControlData, aes(fill=what.do.if.owl.lands.on.the.roof, x = stage)) + geom_bar()
# Fit control model
mControl <- polr(what.do.if.owl.lands.on.the.roof ~ stage, data = questionControlData, Hess=TRUE)
summary(mControl)
m <- mControl
dat <- questionControlData
# Calculate p values
## store table
(ctable <- coef(summary(m)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
# 95% CIs
(ci <- confint(m)) # default method gives profiled CIs - shouldn't cross 0
confint.default(m) # CIs assuming normality
(s <- with(dat, summary(as.numeric(what.do.if.owl.lands.on.the.roof) ~ stage, fun=sf))) ###### Can't validate model due to INF values in table #######
glm(I(as.numeric(what.do.if.owl.lands.on.the.roof) >= 2) ~ stage, family="binomial", data = dat)
glm(I(as.numeric(what.do.if.owl.lands.on.the.roof) >= 3) ~ stage, family="binomial", data = dat)
# Fit null control model
mControlNull <- polr(what.do.if.owl.lands.on.the.roof ~ 1, data = questionControlData, Hess=TRUE)
summary(mNull)
# compare full and null model
AICtab(mControlNull, mControl)
ggplot(data, aes(fill=what.did.when.last.saw.owl, x = stage)) + geom_bar() # plot shows missing values
# fliter out the blanks in resonse variable & delete rows that did not hear talk
questionData <- filter(data, what.did.when.last.saw.owl != "") # removes missing values in response variable
ggplot(questionData, aes(fill=what.did.when.last.saw.owl, x = stage)) + geom_bar() # missing values gone
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
questionTreatmentData <- filter(questionData, hear.talk != "no") # remove respondents that did not hear talk
ggplot(questionTreatmentData, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionTreatmentData, aes(fill=what.did.when.last.saw.owl, x = stage)) + geom_bar() # Looks like a relationship
# Fit ordered logistic regression model
mTreatment <- polr(what.did.when.last.saw.owl ~ stage, data = questionTreatmentData, Hess=TRUE)
summary(mTreatment)
m <- mTreatment
dat <- questionTreatmentData
# Calculate p values
## store table
(ctable <- coef(summary(m)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
# 95% CIs
(ci <- confint(m)) # default method gives profiled CIs - shouldn't cross 0
confint.default(m) # CIs assuming normality
# The coefficients from the model can be somewhat difficult to interpret because they are scaled in terms of logs. Another way to interpret logistic regression models is to convert the coefficients into odds ratios. To get the OR and confidence intervals, we just exponentiate the estimates and confidence intervals.
exp(coef(m)) # stage2 post 1.881341.
# create the function that estimates the values that will be graphed to validate model
(s <- with(dat, summary(as.numeric(what.did.when.last.saw.owl) ~ stage, fun=sf))) ###### Can't validate model due to INF values in table #######
glm(I(as.numeric(what.did.when.last.saw.owl) >= 2) ~ stage, family="binomial", data = dat)
glm(I(as.numeric(what.did.when.last.saw.owl) >= 3) ~ stage, family="binomial", data = dat)
# Fit null model
mTreatmentNull <- polr(what.did.when.last.saw.owl ~ 1, data = questionTreatmentData, Hess=TRUE)
summary(mTreatmentNull)
# compare full and null model
AICtab(mTreatmentNull, mTreatment)
source('~/Dropbox/R_working_dropbox/owls/Temp.R', echo=TRUE)
# create the function that estimates the values that will be graphed to validate model
(s <- with(dat, summary(as.numeric(what.did.when.last.saw.owl) ~ stage, fun=sf))) ###### Can't validate model due to INF values in table #######
glm(I(as.numeric(what.did.when.last.saw.owl) >= 2) ~ stage, family="binomial", data = dat)
glm(I(as.numeric(what.did.when.last.saw.owl) >= 3) ~ stage, family="binomial", data = dat)
# Fit null model
mTreatmentNull <- polr(what.did.when.last.saw.owl ~ 1, data = questionTreatmentData, Hess=TRUE)
summary(mTreatmentNull)
# compare full and null model
AICtab(mTreatmentNull, mTreatment)
# Test responses to same question using controls
# First test those that did hear the talk
ggplot(questionData, aes(fill=hear.talk, x = stage)) + geom_bar()
questionControlData <- filter(questionData, hear.talk != "yes") # remove respondents that did not hear talk
ggplot(questionControlData, aes(fill=hear.talk, x = stage)) + geom_bar() # No talk gone
# Check plot of resonse variable
ggplot(questionControlData, aes(fill=what.did.when.last.saw.owl, x = stage)) + geom_bar()
# Fit control model
mControl <- polr(what.did.when.last.saw.owl ~ stage, data = questionControlData, Hess=TRUE)
summary(mControl)
m <- mControl
dat <- questionControlData
# Calculate p values
## store table
(ctable <- coef(summary(m)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
# 95% CIs
(ci <- confint(m)) # default method gives profiled CIs - shouldn't cross 0
confint.default(m) # CIs assuming normality
(s <- with(dat, summary(as.numeric(what.did.when.last.saw.owl) ~ stage, fun=sf))) ###### Can't validate model due to INF values in table #######
glm(I(as.numeric(what.did.when.last.saw.owl) >= 2) ~ stage, family="binomial", data = dat)
glm(I(as.numeric(what.did.when.last.saw.owl) >= 3) ~ stage, family="binomial", data = dat)
# Fit null control model
mControlNull <- polr(what.did.when.last.saw.owl ~ 1, data = questionControlData, Hess=TRUE)
summary(mNull)
# compare full and null model
AICtab(mControlNull, mControl)
